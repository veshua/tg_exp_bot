import os
import json
import logging
from datetime import datetime, timedelta
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, CallbackContext, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler
)
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

SPREADSHEET_ID = "12Mjnj2wwVDYZcNMzzZG6FC-qG29IFtdigDFOEHC6590"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATE, CATEGORY, AMOUNT, COMMENT = range(4)
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

def create_google_client():
    google_creds_json = os.getenv('GOOGLE_CREDENTIALS')
    if not google_creds_json:
        raise ValueError("GOOGLE_CREDENTIALS environment variable not set")
    try:
        creds_info = json.loads(google_creds_json)
        creds = Credentials.from_service_account_info(creds_info, scopes=SCOPES)
        return gspread.authorize(creds)
    except json.JSONDecodeError:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ GOOGLE_CREDENTIALS")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Google credentials: {e}")
        raise

try:
    CLIENT = create_google_client()
    logger.info("‚úÖ Google Sheets authorization successful")
except Exception as e:
    logger.error(f"‚ùå Google Sheets authorization failed: {e}")
    raise

SPREADSHEET_URL = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}"
SPREADSHEET = None
CATEGORIES = []

def initialize_spreadsheet():
    global SPREADSHEET, CATEGORIES
    try:
        SPREADSHEET = CLIENT.open_by_key(SPREADSHEET_ID)
        logger.info(f"‚úÖ Spreadsheet initialized: {SPREADSHEET_URL}")
        try:
            cat_sheet = SPREADSHEET.worksheet('cat')
            CATEGORIES = cat_sheet.col_values(1)
            if CATEGORIES and ("category" in CATEGORIES[0].lower() or "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in CATEGORIES[0].lower()):
                CATEGORIES = CATEGORIES[1:]
            logger.info(f"Loaded {len(CATEGORIES)} categories")
        except gspread.exceptions.WorksheetNotFound:
            CATEGORIES = []
            logger.warning("Worksheet 'cat' not found")
        except gspread.exceptions.APIError as api_err:
            logger.error(f"Google Sheets API error: {api_err}")
            raise
    except gspread.exceptions.APIError as api_err:
        logger.error(f"Google Sheets API error: {api_err}")
        if api_err.response.status_code == 404:
            error_msg = ("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                         f"1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID: {SPREADSHEET_ID}\n"
                         "2. –î–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ\n"
                         f"–û—à–∏–±–∫–∞: {str(api_err)}")
        else:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Google Sheets API: {str(api_err)}"
        logger.critical(error_msg)
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)
        raise

def get_add_expense_button():
    keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")]]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üí∞ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞:\n{SPREADSHEET_URL}",
        reply_markup=get_add_expense_button()
    )

async def start_add_expense(update: Update, context: CallbackContext) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        keyboard = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")],
            [InlineKeyboardButton("–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="other")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")],
            [InlineKeyboardButton("–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="other")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
    return DATE

async def handle_date(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    choice = query.data
    if choice == "today":
        selected_date = datetime.now().date()
    elif choice == "yesterday":
        selected_date = datetime.now().date() - timedelta(days=1)
    elif choice == "other":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023)")
        return DATE
    else:
        await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return DATE

    context.user_data['date'] = selected_date.strftime("%d.%m.%Y")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.message.reply_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_category_keyboard()
    )
    return CATEGORY

def get_category_keyboard():
    keyboard = [[cat] for cat in CATEGORIES]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

async def handle_date_text(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    try:
        selected_date = datetime.strptime(text, "%d.%m.%Y").date()
        context.user_data['date'] = selected_date.strftime("%d.%m.%Y")
        await update.message.reply_text(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=get_category_keyboard()
        )
        return CATEGORY
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023)")
        return DATE

async def handle_category(update: Update, context: CallbackContext) -> int:
    category = update.message.text
    if category not in CATEGORIES:
        await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        await show_categories(update.message)
        return CATEGORY
    context.user_data['category'] = category
    await update.message.reply_text(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=ReplyKeyboardRemove()
    )
    return AMOUNT

async def handle_amount(update: Update, context: CallbackContext) -> int:
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError
        context.user_data['amount'] = amount
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        return COMMENT
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50):")
        return AMOUNT

async def handle_comment(update: Update, context: CallbackContext) -> int:
    context.user_data['comment'] = update.message.text
    return await save_expense(update, context)

async def skip_comment(update: Update, context: CallbackContext) -> int:
    context.user_data['comment'] = ""
    return await save_expense(update, context)

async def save_expense(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    try:
        try:
            exp_sheet = SPREADSHEET.worksheet('exp')
        except gspread.exceptions.WorksheetNotFound:
            exp_sheet = SPREADSHEET.add_worksheet(title='exp', rows=100, cols=5)
            exp_sheet.append_row(['Date', 'Category', 'Sum', 'Comment', 'User'])
        row = [
            user_data['date'],
            user_data['category'],
            user_data['amount'],
            user_data.get('comment', ''),
            update.effective_user.username or update.effective_user.full_name or "Unknown"
        ]
        exp_sheet.append_row(row)
        await update.message.reply_text("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=get_add_expense_button())
    except gspread.exceptions.APIError as api_err:
        logger.error(f"Google Sheets API error: {api_err}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_add_expense_button())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", reply_markup=get_add_expense_button())
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_add_expense_button()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def show_categories(message) -> None:
    global CATEGORIES
    if not CATEGORIES:
        await message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –ª–∏—Å—Ç 'cat' –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã.")
        return
    keyboard = [[cat] for cat in CATEGORIES]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await message.reply_text("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)

def main() -> None:
    try:
        initialize_spreadsheet()
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—à–∏–±–∫–∞: {e}")
        return

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add_expense", start_add_expense),
            CallbackQueryHandler(start_add_expense, pattern="^add_expense$")
        ],
        states={
            DATE: [
                CallbackQueryHandler(handle_date, pattern="^(today|yesterday|other)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_text)
            ],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
            COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                CommandHandler("skip", skip_comment)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥" –Ω–∞ —Å—Ç–∞—Ä—Ç –∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è

    application.run_polling()

if __name__ == "__main__":
    main()
